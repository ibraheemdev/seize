[package]
name = "seize"
version = "0.5.0"
edition = "2021"
license = "MIT"
authors = ["Ibraheem Ahmed <ibraheem@ibraheem.ca>"]
description = "Fast, efficient, and predictable memory reclamation for concurrent data structures."
repository = "https://github.com/ibraheemdev/seize"
keywords = ["lock-free", "rcu", "atomic", "garbage", "concurrency"]
categories = ["concurrency", "memory-management"]
rust-version = "1.72.0"

[dependencies]
libc = { version = "0.2", optional = true }

[target.'cfg(windows)'.dependencies]
windows-sys = { version = "0.59", features = ["Win32_System_Threading"], optional = true }

[features]
default = ["fast-barrier"]

# Enables runtime detection of fast memory barriers on Linux and Windows.
fast-barrier = ["windows-sys", "libc"]

[dev-dependencies]
criterion = "0.3.5"
crossbeam-epoch = "0.9.8"
haphazard = { git = "https://github.com/jonhoo/haphazard", rev = "e0e18f60f78652a63aba235be854f87d106c1a1b" }

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(seize_asan)'] }

[[bench]]
name = "stack"
harness = false

[[bench]]
name = "single_thread"
harness = false
